(*

Copyright Jeremy Siek and Manish Vachharajani, November 11, 2007

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*)

open Support.Pervasive
open Support.Error
open Parser
open Printf
open Unix
open Parser_misc
open Graph_ast
open Format
open Solve

let rec cast_error_msg ctx v =
  match ctx with
      Cast_ast.Hole ->
	Cast_ast.print_expr v
    | Cast_ast.LeftArrow (_, ctx', t) ->
	sprintf "a function which was passed %s" (cast_error_msg ctx' v)
    | Cast_ast.RightArrow (_, ctx', t) ->
	sprintf "a function that returned %s" (cast_error_msg ctx' v)


let insert_casts_and_run e =
  let (ct,ce) = Cast_ast.insert_casts [] e in
  (* Skip the add *)
  (match ce with
    | LamE (_, _, _, b) -> print_string (Cast_ast.print_expr b))


let _ =
  let inFile = parseArgs() in
  let _ = Filename.chop_extension inFile in
  let e = parseFile inFile in
  let e = LamE (
    UNKNOWN, "add", 
    create_arrow UNKNOWN (create_int UNKNOWN) 
      (create_arrow UNKNOWN (create_int UNKNOWN) (create_int UNKNOWN)),
    e) in
  let t = infer e in
    (*printf "**Graph_ast**\n" ;*)
    (* printf "type: %s\n" (print_node t) ; *)
    (*printf "expression: %s\n" (Graph_ast.print_expr e) ;*)
    (*printf "\n" ;*)
    insert_casts_and_run e


